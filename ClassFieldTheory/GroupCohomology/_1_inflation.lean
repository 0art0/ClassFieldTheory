import Mathlib
import ClassFieldTheory.GroupCohomology._0_Current_PRs
import ClassFieldTheory.GroupCohomology._1_Basic
import ClassFieldTheory.GroupCohomology._1_restriction

open CategoryTheory
  ConcreteCategory
  Limits
  Rep
  groupCohomology
  HomologicalComplex

variable {R G : Type} [CommRing R] [Group G] --[DecidableEq G]

variable {H : Type} [Group H] {œÜ : G ‚Üí* H} (surj : Function.Surjective œÜ) -- [DecidableEq H]

namespace Rep
@[simps] noncomputable def quotientToInvariantsFunctor :
    Rep R G ‚•§ Rep R H where
  obj M := M.quotientToInvariants œÜ.ker ‚Üì (QuotientGroup.quotientKerEquivOfSurjective œÜ surj).symm
  map f := ConcreteCategory.ofHom {
    val := LinearMap.restrict (ModuleCat.Hom.hom f.hom) (by
      rename_i X Y
      intro x hx g
      specialize hx g
      simp only [MonoidHom.coe_comp, Subgroup.coe_subtype, Function.comp_apply] at hx ‚ä¢
      rw [‚ÜêRep.œÅ_hom, ‚ÜêLinearMap.comp_apply, ‚ÜêModuleCat.hom_comp, ‚Üêf.comm,
        ModuleCat.hom_comp, LinearMap.comp_apply, Rep.œÅ_hom, hx])
    property h := by
      rename_i X Y
      ext ‚ü®x,hx‚ü©
      rw [Function.comp_apply, Function.comp_apply]
      apply Subtype.ext
      change f.hom (X.œÅ _ _) = Y.œÅ _ (f.hom _)
      rw [‚ÜêLinearMap.comp_apply]
      nth_rw 2 [‚ÜêLinearMap.comp_apply]
      congr 1
      rw [‚ÜêRep.œÅ_hom, ‚ÜêRep.œÅ_hom, ‚ÜêModuleCat.Hom.hom, ‚ÜêModuleCat.hom_comp, ‚ÜêModuleCat.hom_comp,
        f.comm]
  }
  map_id _ := rfl
  map_comp _ _ := rfl

lemma quotientToInvariantsFunctor_obj_œÅ (M : Rep R G) :
    ((quotientToInvariantsFunctor surj).obj M).œÅ =
    (M.quotientToInvariants œÜ.ker).œÅ.comp ((QuotientGroup.quotientKerEquivOfSurjective œÜ surj).symm)
    := rfl

lemma quotientToInvariantsFunctor_obj_œÅ_apply (M : Rep R G) (g : G) :
    ((quotientToInvariantsFunctor surj).obj M).œÅ (œÜ g) =
    (M.quotientToInvariants œÜ.ker).œÅ g
    := by
  rw [quotientToInvariantsFunctor_obj_œÅ]
  simp only [quotientToInvariantsFunctor_obj, Action.res_obj_V, of_œÅ, MonoidHom.coe_comp,
    MonoidHom.coe_coe, Function.comp_apply]
  congr
  rw [MulEquiv.symm_apply_eq]
  rfl

lemma quotientToInvariantsFunctor_obj_œÅ_apply‚ÇÇ (M : Rep R G) (g : G)
    (v : (quotientToInvariantsFunctor surj).obj M) :
    (((quotientToInvariantsFunctor surj).obj M).œÅ (œÜ g) v).val =
    M.œÅ g v.val
    := by
  rw [quotientToInvariantsFunctor_obj_œÅ_apply]
  rfl

instance : (quotientToInvariantsFunctor (R := R) surj).PreservesZeroMorphisms where
  map_zero _ _ := rfl


set_option quotPrecheck false in
/--
`M ‚Üë H` means the `H` invariants of `M`, as a representation of `G ‚ß∏ H`.
-/
notation M " ‚Üë " surj => (Rep.quotientToInvariantsFunctor surj).obj M

noncomputable def res_quotientToInvariantsFunctor_Œπ (M : Rep R G) :
    (res œÜ).obj (M ‚Üë surj) ‚ü∂ M where
  hom := ofHom (Submodule.subtype _)
  comm g := by
    ext m
    simp only [quotientToInvariantsFunctor_obj, Action.res_obj_V, Action.res_obj_œÅ,
      RingHom.toMonoidHom_eq_coe, RingEquiv.toRingHom_eq_coe, MonoidHom.coe_comp, MonoidHom.coe_coe,
      RingHom.coe_coe, Function.comp_apply, ModuleCat.hom_comp, ModuleCat.hom_ofHom,
      LinearMap.coe_comp, Submodule.coe_subtype, œÅ_hom]
    rw [‚ÜêRep.quotientToInvariantsFunctor_obj_œÅ_apply‚ÇÇ surj M]
    rfl

end Rep
namespace groupCohomology

noncomputable def cochain_infl :
    quotientToInvariantsFunctor surj ‚ãô cochainsFunctor R H ‚ü∂ cochainsFunctor R G where
  app M := cochainsMap œÜ <| res_quotientToInvariantsFunctor_Œπ surj M
  naturality _ _ _ := rfl

/--
The inflation map `H‚Åø(G‚ß∏H, M ‚Üë H) ‚ü∂ H‚Åø(G,M)` as a natural transformation.
This is defined using the inflation map on cocycles.
-/
noncomputable def infl (n : ‚Ñï) :
    Rep.quotientToInvariantsFunctor surj ‚ãô functor R H n ‚ü∂ functor R G n :=
  (groupCohomology.cochain_infl surj) ‚ó´ ùüô (homologyFunctor _ _ n)

/--
Suppose we have a short exact sewuence `0 ‚ü∂ A ‚ü∂ B ‚ü∂ C ‚ü∂ 0` in `Rep R G`.
If `H¬π(H,A) = 0` then the invariants form a short exact sequence in `Rep R H`:

  `0 ‚ü∂ A·¥∑ ‚ü∂ B·¥∑ ‚ü∂ C·¥∑ ‚ü∂ 0`, where `K = œÜ.ker`.
-/
lemma quotientToInvariantsFunctor_shortExact_ofShortExact {S : ShortComplex (Rep R G)}
    (hS : S.ShortExact) (hS' : IsZero (H1 (S.X‚ÇÅ ‚Üì œÜ.ker.subtype))) :
    (S.map (quotientToInvariantsFunctor surj)).ShortExact := by
  /-
  This is the opening section of the long exact sequence. The next term is `H¬π(K,S.X‚ÇÅ)`, which
  is assumeed to be zero.
  -/
  sorry

/--
Assume that we have a short exact sequence `0 ‚Üí A ‚Üí B ‚Üí C ‚Üí 0` in `Rep R G`
and that the sequence of `H`- invariants is also a short exact in `Rep R (G ‚ß∏ H)` :

  `0 ‚Üí A·¥¥ ‚Üí B·¥¥ ‚Üí C·¥¥ ‚Üí 0`.

Then we have a commuting square

`   H‚Åø(G ‚ß∏ H, C·¥¥)  ‚ü∂   H^{n+1}(G ‚ß∏ H, A·¥¥) `
`         |                 |             `
`         ‚Üì                 ‚Üì             `
`     H‚Åø(G , C)    ‚ü∂   H^{n+1}(G,A)       `

where the horizontal maps are connecting homomorphisms
and the vertical maps are inflation.
-/
lemma infl_Œ¥_naturality {S : ShortComplex (Rep R G)} (hS : S.ShortExact)
    (hS' : (S.map (quotientToInvariantsFunctor surj)).ShortExact)  (i j : ‚Ñï) (hij : i + 1 = j) :
    Œ¥ hS' i j hij ‚â´ (infl surj j).app _ = (infl surj i).app _ ‚â´ Œ¥ hS i j hij
    := by
  let C := S.map (cochainsFunctor R G)
  let S' := S.map (quotientToInvariantsFunctor surj)
  let C' := S'.map (cochainsFunctor R H)
  let œÜ : C' ‚ü∂ C := {
    œÑ‚ÇÅ := by
        change (cochainsFunctor _ _).obj S'.X‚ÇÅ ‚ü∂ (cochainsFunctor _ _).obj S.X‚ÇÅ
        exact (cochain_infl surj).app S.X‚ÇÅ
    œÑ‚ÇÇ := by
        change (cochainsFunctor _ _).obj S'.X‚ÇÇ ‚ü∂ (cochainsFunctor _ _).obj S.X‚ÇÇ
        exact (cochain_infl surj).app S.X‚ÇÇ
    œÑ‚ÇÉ := by
        change (cochainsFunctor _ _).obj S'.X‚ÇÉ ‚ü∂ (cochainsFunctor _ _).obj S.X‚ÇÉ
        exact (cochain_infl surj).app S.X‚ÇÉ
    comm‚ÇÅ‚ÇÇ := by
      simp only [id_eq]
      exact ((cochain_infl surj).naturality S.f).symm
    comm‚ÇÇ‚ÇÉ := by
      simp only [id_eq]
      exact ((cochain_infl surj).naturality S.g).symm
  }
  have ses‚ÇÅ : C.ShortExact := map_cochainsFunctor_shortExact hS
  have ses‚ÇÇ : C'.ShortExact := map_cochainsFunctor_shortExact hS'
  exact HomologySequence.Œ¥_naturality œÜ ses‚ÇÇ ses‚ÇÅ i j hij
