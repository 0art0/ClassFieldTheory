import Mathlib
import ClassFieldTheory.GroupCohomology._0_Current_PRs
import ClassFieldTheory.GroupCohomology._1_Basic
import ClassFieldTheory.GroupCohomology._1_restriction

open CategoryTheory
  Limits
  Rep
  groupCohomology
  HomologicalComplex

variable {R G : Type} [CommRing R] [Group G]

variable (H : Subgroup G) [H.Normal]

def Rep.invariants' (H : Subgroup G) [H.Normal] : Rep R G ‚•§ Rep R (G ‚ß∏ H) where
  obj M := M.quotientToInvariants H --current PR
  map f := sorry

instance : (invariants' (R := R) H).PreservesZeroMorphisms := sorry

set_option quotPrecheck false in
/--
`M ‚Üë H` means the `H` invariants of `M`, as a representation of `G ‚ß∏ H`.
-/
notation M " ‚Üë " H => (Rep.invariants' H).obj M
--infix : 80 " ‚Üë " => fun (M : Rep R G) (H : Subgroup G) [H.Normal] ‚Ü¶ (Rep.invariants' H).obj M



def groupCohomology.cochain_infl :
    invariants' H ‚ãô cochainsFunctor R (G ‚ß∏ H) ‚ü∂ cochainsFunctor R G := sorry -- current PR

/--
# TODO :
  move this to the file `Basic.lean`.

The `n`-th group cohomology functor is the composition of the cochains functor and the
`n`-homology functor.
-/
lemma groupCohomology.functor_eq_cochainsFunctor_comp_homology (n : ‚Ñï) :
    functor R G n = cochainsFunctor R G ‚ãô homologyFunctor _ _ n := rfl

/--
The inflation map `H‚Åø(G‚ß∏H, M ‚Üë H) ‚ü∂ H‚Åø(G,M)` as a natural transformation.
This is defined using the inflation map on cocycles.
-/
noncomputable def groupCohomology.infl (n : ‚Ñï) :
    Rep.invariants' H ‚ãô (functor R (G ‚ß∏ H) n) ‚ü∂ functor R G n := by
  dsimp only [functor_eq_cochainsFunctor_comp_homology, ‚ÜêFunctor.assoc]
  exact (groupCohomology.cochain_infl H) ‚ó´ ùüô _

/--
Suppose we have a short exact sewuence `0 ‚ü∂ A ‚ü∂ B ‚ü∂ C ‚ü∂ 0` in `Rep R G`.
If `H¬π(H,A) = 0` then the invariants form a short exact sequence in `Rep R (G ‚ß∏ H)`:

  `0 ‚ü∂ A·¥¥ ‚ü∂ B·¥¥ ‚ü∂ C·¥¥ ‚ü∂ 0`.
-/
lemma invariants'_shortExact_ofShortExact {S : ShortComplex (Rep R G)} (hS : S.ShortExact)
    (hS' : IsZero (H1 (S.X‚ÇÅ ‚Üì H))) : (S.map (invariants' H)).ShortExact :=
  /-
  This is the opening section of the long exact sequence. The next term is `H¬π(H,S.X‚ÇÅ)`, which
  is assumeed to be zero.
  -/
  sorry

/--
Assume that we have a short exact sequence `0 ‚Üí A ‚Üí B ‚Üí C ‚Üí 0` in `Rep R G`
and that the sequence of `H`- invariants is also a short exact in `Rep R (G ‚ß∏ H)` :

  `0 ‚Üí A·¥¥ ‚Üí B·¥¥ ‚Üí C·¥¥ ‚Üí 0`.

Then we have a commuting square

`   H‚Åø(G ‚ß∏ H, C·¥¥)  ‚ü∂   H^{n+1}(G ‚ß∏ H, A·¥¥) `
`         |                 |             `
`         ‚Üì                 ‚Üì             `
`     H‚Åø(G , C)    ‚ü∂   H^{n+1}(G,A)       `

where the horizontal maps are connecting homomorphisms
and the vertical maps are inflation.
-/
lemma infl_Œ¥_naturality {S : ShortComplex (Rep R G)} (hS : S.ShortExact)
    (hS' : (S.map (invariants' H)).ShortExact)  (i j : ‚Ñï) (hij : i + 1 = j) :
    Œ¥ hS' i j hij ‚â´ (infl H j).app _ = (infl H i).app _ ‚â´ Œ¥ hS i j hij
    := by
  let C := S.map (cochainsFunctor R G)
  let S' := S.map (invariants' H)
  let C' := S'.map (cochainsFunctor R (G ‚ß∏ H))
  let œÜ : C' ‚ü∂ C := {
    œÑ‚ÇÅ := by
        change (cochainsFunctor _ _).obj S'.X‚ÇÅ ‚ü∂ (cochainsFunctor _ _).obj S.X‚ÇÅ
        exact (cochain_infl H).app S.X‚ÇÅ
    œÑ‚ÇÇ := by
        change (cochainsFunctor _ _).obj S'.X‚ÇÇ ‚ü∂ (cochainsFunctor _ _).obj S.X‚ÇÇ
        exact (cochain_infl H).app S.X‚ÇÇ
    œÑ‚ÇÉ := by
        change (cochainsFunctor _ _).obj S'.X‚ÇÉ ‚ü∂ (cochainsFunctor _ _).obj S.X‚ÇÉ
        exact (cochain_infl H).app S.X‚ÇÉ
    comm‚ÇÅ‚ÇÇ := ((cochain_infl H).naturality S.f).symm
    comm‚ÇÇ‚ÇÉ := ((cochain_infl H).naturality S.g).symm
  }
  have ses‚ÇÅ : C.ShortExact := sorry -- current PR
  have ses‚ÇÇ : C'.ShortExact := sorry -- current PR
  convert HomologySequence.Œ¥_naturality œÜ ses‚ÇÇ ses‚ÇÅ i j hij
  ¬∑ sorry --should be `rfl` after defn of `groupCohomology.Œ¥` included in current PR
  ¬∑ sorry --should be `rfl` after defn of `groupCohomology.Œ¥` included in current PR
