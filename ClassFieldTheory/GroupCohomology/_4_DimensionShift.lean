import Mathlib
import ClassFieldTheory.GroupCohomology._3_LeftRegular

/-!
We define two "coinduction" functors taking values in the acyclic objects of `Rep R G`.

The first is `coind‚ÇÅ G : ModuleCat R ‚•§ Rep R G`.

This takes an `R`-module `A` to the space of linear maps `R[G] ‚ü∂ A`, where `G` acts by
its action of `R[G]`. Note that the linear maps `R[G] ‚ü∂ A` are equivalent to the functions
`G ‚Üí A`, since the elements of `G` form a basis for the group ring `R[G]`.

The second functor is `coind'‚ÇÅ : Rep R G ‚•§ Rep R G`.

This takes a representation `M` of `G` to the space of
This takes an `R`-module `A` to the space of linear maps `R[G] ‚ü∂ M`, where `G` acts by
conjugation (i.e. on both `R[G]` and on `M`).

The representations `coind'‚ÇÅ.obj M` and `(coind‚ÇÅ G).obj M.V` are isomorphic (although
the isomorphism is not simply the identity map on the space of functions `G ‚Üí M`, since the
actions of `G` on these spaces are not the same).

For any `M : Rep R G` we construct two short exact sequences
(the second defined only for finite `G`):

  `0 ‚ü∂ M ‚ü∂ coind'‚ÇÅ.obj M ‚ü∂ up M ‚ü∂ 0` and `0 ‚ü∂ down M ‚ü∂ coind'‚ÇÅ.obj M ‚ü∂ M ‚ü∂ 0`.

These can be used for dimension-shifting because `coind'‚ÇÅ.obj M` is acyclic.
-/

open
  Rep
  leftRegular
  CategoryTheory
  ConcreteCategory
  Limits
  groupCohomology

noncomputable section

variable {R : Type} [CommRing R]
variable (G : Type) [Group G]

namespace Rep
/--
The functor taking an `R`-module `A` to the trivial representation of `G` on `A`.
-/
def fTrivial : ModuleCat R ‚•§ Rep R G where
  obj A := trivial R G A
  map f := {
    hom := f
    comm := by tauto
  }

/--
The coinduced representation of an `R`-module `A`, defined to be the
space of linear maps `R[G] ‚Üí A`, on which `G` acts on `R[G]`.
This is isomorphic to the function space `G ‚Üí A`, where `G` acts by translation.
-/
abbrev coind‚ÇÅ : ModuleCat R ‚•§ Rep R G := fTrivial G ‚ãô (leftRegular R G).ihom

/--
Coinduced representations are acyclic.
-/
theorem coind‚ÇÅ_isAcyclic (A : ModuleCat R) : ((coind‚ÇÅ G).obj A).IsAcyclic :=
  /-
  There are many ways to prove this. The following method uses none of the
  technology of homological algebra, so it should be fairly easy to formalize.

  Fix a subgroup `H` of `G` and let `{g·µ¢}` be a set of coset representatives for `H \ G`.
  Recall that a homogeneous `n + 1`-cochain on `H` with values in `G ‚Üí A`
  is a function `œÉ : H^{n+2} ‚Üí (G ‚Üí A)` satisfying

    `œÉ (h * h‚ÇÄ, ... , h * h_{n+1}) (h * g) = œÉ (h‚ÇÄ,...,h‚Çô).`

  The cochain `œÉ` is a cocycle if it satisfies the relation

    `‚àë·µ¢ (-1)‚Å± * œÉ (h‚ÇÄ, ... , (not h·µ¢), ... , h_{n+2}) (g) = 0`.

  Given a homogeneous `n + 1`-cocycle `œÉ`, we'll define a homogeneous `n`-cochain `œÑ` by

    `œÑ (h‚ÇÄ,...,h‚Çô) (h * g·µ¢) = œÉ (h,h‚ÇÄ,...,h‚Çô) (h * g·µ¢)`.

  The cocycle relation for `œÉ` implies `‚àÇ œÑ = œÉ`, so `œÉ` is a coboundary.

  Let's rephrase this in terms of inhomogeneous cocycles. The inhomogeneous cocycle
  corresponding to `œÉ` is

    `œÉ' (h‚ÇÄ,...,h‚Çô) (h * g·µ¢) = œÉ (1,h‚ÇÅ,h‚ÇÅ*h‚ÇÇ,..., h‚ÇÅ*...*h‚Çô) (h * g·µ¢)`

  and the inhomogeneous cochain corresponding to `œÑ` is

    `œÑ' (h‚ÇÅ,...,h‚Çô) (h * g·µ¢)  = œÑ (1,h‚ÇÅ,... , h‚ÇÅ*...*h‚Çô) (h * g·µ¢)`
    `                         = œÉ (h, 1, h‚ÇÅ, h‚ÇÅ*h‚ÇÇ, ..., h‚ÇÅ*...*h‚Çô) (h * g·µ¢)`
    `                         = œÉ (1, h‚Åª¬π, h‚Åª¬π*h‚ÇÅ, h‚Åª¬π*h‚ÇÅ*h‚ÇÇ, ..., h‚Åª¬π* h‚ÇÅ*...*h‚Çô) (g·µ¢)`
    `                         = œÉ' (h‚Åª¬π,h‚ÇÅ,...,h‚Çô) (g·µ¢)`.

  The last formula above defines an inhomogeneous cochain `œÑ'`, such that `‚àÇ œÑ' = œÉ'`.
  -/
  sorry


def coind‚ÇÅ_quotientToInvariants_iso (A : ModuleCat R) (H : Subgroup G) [H.Normal] :
    ((coind‚ÇÅ G).obj A).quotientToInvariants H ‚âÖ (coind‚ÇÅ (G ‚ß∏ H)).obj A :=
  /-
  Use the isomorphism `Rep.coind‚ÇÅ_iso` on the left.
  Then the `H`-invariants on the left hand side are just functions `G/H ‚ü∂ M` with the action
  of `G/H` by translation on `G/H`. This is exactly the right hand side.

  Since `quotientToInvariants` is a current PR, this will have to wait.
  -/
  sorry

/--
The `H`-invariants of `(coind‚ÇÅ G).obj A` form an acyclic representation of `G ‚ß∏ H`.
-/
lemma coind‚ÇÅ_quotientToInvariants_isAcyclic (A : ModuleCat R) (H : Subgroup G) [H.Normal] :
    (((coind‚ÇÅ G).obj A).quotientToInvariants H).IsAcyclic := by
  apply Rep.isAcyclic_of_iso
  apply Rep.coind‚ÇÅ_quotientToInvariants_iso
  exact coind‚ÇÅ_isAcyclic (G ‚ß∏ H) A

variable {G}

/--
The coinduced representation of a repesentation `M`, defined to be the
space of linear maps `R[G] ‚Üí M`, on which `G` acts on both `R[G]` and `M`.
This is isomorphic to the function space `G ‚Üí M` on which `G` acts on both `G` and `M`.
-/
abbrev coind'‚ÇÅ : Rep R G ‚•§ Rep R G := (leftRegular R G).ihom

/--
This can be used to regard an element of `coind'‚ÇÅ.obj M` as a linear map of type
`leftRegular R G ‚Üí‚Çó[R] M`.
-/
def as‚Çó {M : Rep R G} (f : coind'‚ÇÅ.obj M) : leftRegular R G ‚Üí‚Çó[R] M := f

instance (M : Rep R G) : FunLike (coind'‚ÇÅ.obj M) (leftRegular R G) M :=
  inferInstanceAs (FunLike ((leftRegular R G) ‚Üí‚Çó[R] M) _ _)

@[simp] lemma as‚Çó_apply {M : Rep R G} (f : coind'‚ÇÅ.obj M) (v : leftRegular R G) : as‚Çó f v = f v := rfl

@[ext] lemma coind'‚ÇÅ.ext {M : Rep R G} (f‚ÇÅ f‚ÇÇ : coind'‚ÇÅ.obj M)
    (h : ‚àÄ g : G, f‚ÇÅ (leftRegular.of g) = f‚ÇÇ (leftRegular.of g)) : f‚ÇÅ = f‚ÇÇ := by
  apply Finsupp.lhom_ext
  intro g c
  rw [‚ÜêFinsupp.smul_single_one, map_smul, h, map_smul]

lemma coind'‚ÇÅ_obj_œÅ_apply {M : Rep R G} (g : G) (f : coind'‚ÇÅ.obj M) :
  (coind'‚ÇÅ.obj M).œÅ g f = M.œÅ g ‚àò‚Çó f ‚àò‚Çó (leftRegular R G).œÅ g‚Åª¬π := rfl

lemma coind'‚ÇÅ_obj_œÅ_apply‚ÇÇ {M : Rep R G} (g : G) (f : coind'‚ÇÅ.obj M) (v : leftRegular R G):
  (coind'‚ÇÅ.obj M).œÅ g f v = M.œÅ g (f ((leftRegular R G).œÅ g‚Åª¬π v)) := rfl

lemma coind'‚ÇÅ_map_apply {M N : Rep R G} (f‚ÇÅ : M ‚ü∂ N) (f‚ÇÇ : coind'‚ÇÅ.obj M) (v : leftRegular R G) :
    coind'‚ÇÅ.map f‚ÇÅ f‚ÇÇ v = f‚ÇÅ (f‚ÇÇ v) := by rfl

/--
Both of the representations `coind'‚ÇÅ.obj M` and `(coind‚ÇÅ G).obj M.V` can be thought of
as spaces of linear maps `R[G] ‚ü∂ M`, or equivalently as spaces of functions `G ‚Üí M`.
However the action of `G` on `coind'‚ÇÅ.obj M` is by conjugation, wheras the action
of `G` on `(coind‚ÇÅ G).obj M.V` is by translation on `G`.
The isomorphism between them takes a function `f : G ‚Üí M` to the function
`x ‚Ü¶ M.œÅ x‚Åª¬π (f x)`. Equivalently, if `F : R[G] ‚ü∂ M` is a linear map then this is taken to the
linear map `R[G] ‚ü∂ M` defined by `v ‚Ü¶ ‚àë x ‚àà v.support, (v x) ‚Ä¢  M.œÅ x‚Åª¬π (F (leftRegular.of x))`.

It would be nicer to state this as an isomorphism of functors
between `coind'‚ÇÅ` and `(forget‚ÇÇ _ _) ‚ãô coind‚ÇÅ G`, but this isn't needed right now.
-/
def coind'‚ÇÅ_iso_coind‚ÇÅ (M : Rep R G) : coind'‚ÇÅ.obj M ‚âÖ (coind‚ÇÅ G).obj M.V where
  hom := {
    hom := ofHom {
      toFun œÜ := {
        toFun v := ‚àë g ‚àà v.support, (v g) ‚Ä¢ M.œÅ g‚Åª¬π (œÜ.toFun (leftRegular.of g))
        map_add' := sorry
        map_smul' := sorry
      }
      map_add' := sorry
      map_smul' := sorry
    }
    comm g := by
      sorry
  }
  inv := sorry
  hom_inv_id := sorry
  inv_hom_id := sorry



variable (M : Rep R G)

/--
`coind'‚ÇÅ.obj M` is an acyclic representation of `G`.
-/
lemma coind'‚ÇÅ_isAcyclic : (coind'‚ÇÅ.obj M).IsAcyclic := by
  apply isAcyclic_of_iso
  apply coind'‚ÇÅ_iso_coind‚ÇÅ
  exact coind‚ÇÅ_isAcyclic G M.V

/--
The `H`-invariants in `coind'‚ÇÅ.obj M` form an acyclic representation of `G ‚ß∏ H`.
-/
lemma coind'‚ÇÅ_quotientToInvariants_isAcyclic (H : Subgroup G) [H.Normal] :
    ((coind'‚ÇÅ.obj M).quotientToInvariants H).IsAcyclic := by
  have : (coind'‚ÇÅ.obj M).quotientToInvariants H ‚âÖ ((coind‚ÇÅ G).obj M.V).quotientToInvariants H
  ¬∑ /-
    It would be helpful to define `quotientToInvariants` as a functor, in order to make this
    automatic from the isomorphism `coind'‚ÇÅ.obj M ‚âÖ (coind‚ÇÅ G).obj M.V`. Since `quotientToInvariants`
    is a current PR, this will need to wait.
    -/
    sorry
  exact Rep.isAcyclic_of_iso this (coind‚ÇÅ_quotientToInvariants_isAcyclic _ _ _)

namespace dimensionShift

/--
The inclusion of `M` in its coinduced representation. If we think of the
coinduced representation as the function space `G ‚Üí M`, then this inclusion is
the map `m ‚Ü¶ const G m`.
-/
def up_Œπ : M ‚ü∂ coind'‚ÇÅ.obj M := by
  apply ofHom
  exact {
    val := {
      toFun m := {
        toFun v := Œµ R G v ‚Ä¢ m
        map_add' := sorry
        map_smul' := sorry
      }
      map_add' := sorry
      map_smul' := sorry
    }
    property g := by
      sorry
  }

lemma up_Œπ_apply {M : Rep R G} (m : M) (v : leftRegular R G) : (up_Œπ M) m v = (Œµ R G v) ‚Ä¢ m := rfl

lemma up_Œπ_apply_of {M : Rep R G} (m : M) (x : G) : (up_Œπ M) m (leftRegular.of x) = m := by
  rw [up_Œπ_apply, Œµ_of, one_smul]

/--
The inclusion of `M : Rep R G` in `coind'‚ÇÅ.obj M` as a natural transformation.
-/
def up_Œπ' : ùü≠ (Rep R G) ‚ü∂ coind'‚ÇÅ where
  app := up_Œπ
  naturality M N f := by
    ext m x
    simp only [Functor.id_obj, Functor.id_map, Action.comp_hom, ModuleCat.hom_comp,
      LinearMap.coe_comp, Function.comp_apply, ModuleCat.hom_ofHom, LinearMap.llcomp_apply,
      hom_apply]
    rw [up_Œπ_apply_of, coind'‚ÇÅ_map_apply, up_Œπ_apply_of]

/--
The map from `M` to its coinduced representation is a monomorphism.
-/
instance : Mono (up_Œπ M) := by
  /-
  This is because the map is injective.
  (Choose `v` in `R[G]` such that `Œµ R G v = 1`; for example we can take
  `v := leftRegular.of 1`. Then we have `m = (up_Œπ M m).toFun v`.)
  -/
  sorry

/-
The functor taking `M : Rep R G` to `up.obj M`, defined by the short exact sequence

  `0 ‚ü∂ M ‚ü∂ coind'‚ÇÅ.obj M ‚ü∂ up.obj M ‚ü∂ 0`.

Since `coind'‚ÇÅ.obj M` is acyclic, the cohomology of `up.obj M` is a shift by one
of the cohomology of `M`.
-/
def up : Rep R G ‚•§ Rep R G where
  obj M := cokernel (up_Œπ'.app M)
  map f := by
    dsimp
    apply cokernel.desc _ (coind'‚ÇÅ.map f ‚â´ cokernel.œÄ (up_Œπ'.app _))
    rw [‚ÜêCategory.assoc, ‚Üêup_Œπ'.naturality, Category.assoc, cokernel.condition, comp_zero]
  map_id := sorry
  map_comp := sorry

/--
The short exact sequence

  `0 ‚ü∂ M ‚ü∂ coind'‚ÇÅ.obj M ‚ü∂ up.obj M ‚ü∂ 0`

This can be used for dimension shifting because `coind'‚ÇÅ.obj M` is acyclic.
-/
abbrev up_ses : ShortComplex (Rep R G) where
  X‚ÇÅ := M
  X‚ÇÇ := coind'‚ÇÅ.obj M
  X‚ÇÉ := up.obj M
  f := up_Œπ M
  g := cokernel.œÄ (up_Œπ M)
  zero := cokernel.condition (up_Œπ M)

lemma up_shortExact : (up_ses M).ShortExact where
  exact := ShortComplex.exact_cokernel (up_Œπ M)
  mono_f := inferInstance
  epi_g := coequalizer.œÄ_epi

lemma up_shortExact' (H : Subgroup G) :
    ((up_ses M).map (res H)).ShortExact := by
  rw [res_respectsShortExact]
  exact up_shortExact M

/--
The connecting homomorphism from `H^{n+1}(G,dimensionShift M)` to `H^{n+2}(G,M)` is
an epimorphism (i.e. surjective).
-/
lemma up_Œ¥_zero_epi : Epi (Œ¥ (up_shortExact M) 0 1 rfl) :=
  /-
  The next term in the long exact sequence is zero by `groupCohomology.ofCoind‚ÇÅ`.
  -/
  sorry

/--
The connecting homomorphism from `H^{n+1}(G,up M)` to `H^{n+2}(G,M)` is an
isomorphism.
-/
instance up_Œ¥_isIso (n : ‚Ñï) : IsIso (Œ¥ (up_shortExact M) (n + 1) (n + 2) rfl) :=
  /-
  This map is sandwiched between two zeros by `groupCohomology.ofCoind‚ÇÅ`.
  -/
  sorry

def up_Œ¥iso (n : ‚Ñï) : groupCohomology (up.obj M) (n + 1) ‚âÖ groupCohomology M (n + 2) :=
  asIso (Œ¥ (up_shortExact M) (n + 1) (n + 2) rfl)

/--
The connecting homomorphism from `H^{n+1}(G,dimensionShift M)` to `H^{n+2}(G,M)` is
an epimorphism (i.e. surjective).
-/
lemma up_Œ¥_zero_epi' (H : Subgroup G) : Epi (Œ¥ (up_shortExact' M H) 0 1 rfl) :=
  /-
  The next term in the long exact sequence is zero by `groupCohomology.ofCoind‚ÇÅ`.
  -/
  sorry

/--
The connecting homomorphism from `H^{n+1}(G,up M)` to `H^{n+2}(G,M)` is an
isomorphism.
-/
instance up_Œ¥_isIso' (H : Subgroup G) (n : ‚Ñï) : IsIso (Œ¥ (up_shortExact' M H) (n + 1) (n + 2) rfl) :=
  /-
  This map is sandwiched between two zeros by `groupCohomology.ofCoind‚ÇÅ`.
  -/
  sorry

def up_Œ¥iso' (H : Subgroup G) (n : ‚Ñï) :
    groupCohomology (up.obj M ‚Üì H) (n + 1) ‚âÖ groupCohomology (M ‚Üì H) (n + 2) :=
  asIso (Œ¥ (up_shortExact' M H) (n + 1) (n + 2) rfl)

variable [Fintype G]

def down_œÄ : coind'‚ÇÅ.obj M ‚ü∂ M where
  hom := ofHom {
      toFun f := ‚àë g : G, f (leftRegular.of g)
      map_add' := sorry
      map_smul' := sorry
    }
  comm := sorry

lemma down_œÄ_apply (f : coind'‚ÇÅ.obj M) : down_œÄ M f = ‚àë g : G, f (leftRegular.of g) := rfl

def down_œÄ' : coind'‚ÇÅ ‚ü∂ ùü≠ (Rep R G) where
  app M := down_œÄ M
  naturality X Y œÜ := by
    dsimp only [Functor.id_obj, Functor.id_map]
    ext f
    rw [hom_apply, hom_apply]
    simp only [hom_comp, Function.comp_apply, down_œÄ_apply, map_sum]
    rw [Finset.sum_congr rfl]
    intro x _
    rw [coind'‚ÇÅ_map_apply]



instance : Epi (down_œÄ M) :=
  /-
  This is because `down_œÄ M` is surjective.
  A pre-image of an element `m : M` is the function `G ‚Üí M` taking the value
  `m` at `1 : G` and `0` elsewhere. Equivalently this is the linear map
  `(leftRegular R G).V ‚ü∂ M.V` taking `f` to `(f 1) ‚Ä¢ m`.
  -/
  sorry


def down : Rep R G ‚•§ Rep R G where
  obj M := kernel (down_œÄ'.app M)
  map œÜ := by
    dsimp only [Functor.id_obj]
    apply kernel.lift _ (kernel.Œπ _ ‚â´ coind'‚ÇÅ.map œÜ)
    rw [Category.assoc, down_œÄ'.naturality, ‚ÜêCategory.assoc, kernel.condition, zero_comp]
  map_id := sorry
  map_comp := sorry

abbrev down_ses : ShortComplex (Rep R G) where
  X‚ÇÅ := down.obj M
  X‚ÇÇ := coind'‚ÇÅ.obj M
  X‚ÇÉ := M
  f := kernel.Œπ (down_œÄ M)
  g := down_œÄ M
  zero := kernel.condition (down_œÄ M)

lemma down_shortExact : (down_ses M).ShortExact where
  exact := ShortComplex.exact_kernel (down_œÄ M)
  mono_f := inferInstance
  epi_g := inferInstance

lemma down_shortExact' (H : Subgroup G) :
    ((down_ses M).map (res H)).ShortExact := by
  rw [res_respectsShortExact]
  exact down_shortExact M

/--
The connecting homomorphism from `H^{n+1}(G,M)` to `H^{n+2}(G,down M)` is
an epimorphism (i.e. surjective).
-/
lemma down_Œ¥_zero_epi : Epi (Œ¥ (down_shortExact M) 0 1 rfl) :=
  /-
  The next term in the long exact sequence is zero by `groupCohomology.ofCoind‚ÇÅ`.
  -/
  sorry

/--
The connecting homomorphism from `H^{n+1}(G,M)` to `H^{n+2}(G,down M)` is an
isomorphism.
-/
instance down_Œ¥_isIso (n : ‚Ñï) : IsIso (Œ¥ (down_shortExact M) (n + 1) (n + 2) rfl) :=
  /-
  This map is sandwiched between two zeros by `groupCohomology.ofCoind‚ÇÅ`.
  -/
  sorry

instance down_Œ¥_isIso' (H : Subgroup G) (n : ‚Ñï) :
    IsIso (Œ¥ (down_shortExact' M H) (n + 1) (n + 2) rfl) :=
  /-
  This map is sandwiched between two zeros by `groupCohomology.ofCoind‚ÇÅ`.
  -/
  sorry
/--
The isomorphism `H^{n+1}(G,up M) ‚âÖ H^{n+2}(G,M)`.
-/
def down_Œ¥iso (n : ‚Ñï) : groupCohomology M (n + 1) ‚âÖ groupCohomology (down.obj M) (n + 2) :=
  asIso (Œ¥ (down_shortExact M) (n + 1) (n + 2) rfl)

/--
The isomorphism `H^{n+1}(H,up M) ‚âÖ H^{n+2}(H,M)`.
-/
def down_Œ¥iso' (H : Subgroup G) (n : ‚Ñï) :
    groupCohomology (M ‚Üì H) (n + 1) ‚âÖ groupCohomology ((down.obj M) ‚Üì H) (n + 2) :=
  asIso (Œ¥ (down_shortExact' M H) (n + 1) (n + 2) rfl)

end dimensionShift
end Rep
end
