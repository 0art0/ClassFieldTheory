import Mathlib

open CategoryTheory

variable {R : Type} [CommRing R]
variable {G : Type} [Group G]

noncomputable section Long_Exact_Sequences

namespace groupCohomology
/--
# Leave this as a sorry, and then remove once Amelia's PR 21760 on long exact sequences is merged.

(This has the same name and Type as in PR 21760.)

The connecting homomorphism in the long exact sequence in group cohomology.
-/
def Œ¥ {S : ShortComplex (Rep R G)} (hS : S.ShortExact) (i j : ‚Ñï) (hij : i + 1 = j) :
    groupCohomology S.X‚ÇÉ i ‚ü∂ groupCohomology S.X‚ÇÅ j := sorry

def longExactSequence‚ÇÅ {S : ShortComplex (Rep R G)} (hS : S.ShortExact) (n : ‚Ñï) :
  ShortComplex (ModuleCat R) where
    X‚ÇÅ := groupCohomology S.X‚ÇÅ n
    X‚ÇÇ := groupCohomology S.X‚ÇÇ n
    X‚ÇÉ := groupCohomology S.X‚ÇÉ n
    f := groupCohomology.map (MonoidHom.id G) S.f n
    g := groupCohomology.map (MonoidHom.id G) S.g n
    zero := sorry

def longExactSequence‚ÇÇ {S : ShortComplex (Rep R G)} (hS : S.ShortExact) (n : ‚Ñï) :
  ShortComplex (ModuleCat R) where
    X‚ÇÅ := groupCohomology S.X‚ÇÇ n
    X‚ÇÇ := groupCohomology S.X‚ÇÉ n
    X‚ÇÉ := groupCohomology S.X‚ÇÅ (n + 1)
    f := groupCohomology.map (MonoidHom.id G) S.g n
    g := groupCohomology.Œ¥ hS n (n+1) rfl
    zero := sorry

def longExactSequence‚ÇÉ {S : ShortComplex (Rep R G)} (hS : S.ShortExact) (n : ‚Ñï) :
  ShortComplex (ModuleCat R) where
    X‚ÇÅ := groupCohomology S.X‚ÇÉ n
    X‚ÇÇ := groupCohomology S.X‚ÇÅ (n + 1)
    X‚ÇÉ := groupCohomology S.X‚ÇÇ (n + 1)
    f := groupCohomology.Œ¥ hS n (n+1) rfl
    g := groupCohomology.map (MonoidHom.id G) S.f (n + 1)
    zero := sorry

lemma isLongExact‚ÇÅ {S : ShortComplex (Rep R G)} (hS : S.ShortExact) (n : ‚Ñï) :
    (longExactSequence‚ÇÅ hS n).Exact := sorry
lemma isLongExact‚ÇÇ {S : ShortComplex (Rep R G)} (hS : S.ShortExact) (n : ‚Ñï) :
    (longExactSequence‚ÇÅ hS n).Exact := sorry
lemma isLongExact‚ÇÉ {S : ShortComplex (Rep R G)} (hS : S.ShortExact) (n : ‚Ñï) :
    (longExactSequence‚ÇÅ hS n).Exact := sorry

end groupCohomology
end Long_Exact_Sequences


section Inflation_Restriction

namespace groupCohomology

abbrev _root_.Rep.quotientToInvariants (M : Rep R G) (S : Subgroup G) [S.Normal] : Rep R (G ‚ß∏ S) :=
  sorry

variable (M : Rep R G) (S : Subgroup G) [S.Normal]

@[simps X‚ÇÅ X‚ÇÇ X‚ÇÉ]
noncomputable def H1InfRes :
    ShortComplex (ModuleCat R) where
  X‚ÇÅ := H1 (M.quotientToInvariants S)
  X‚ÇÇ := H1 M
  X‚ÇÉ := H1 ((Action.res _ S.subtype).obj M)
  f := H1Map (QuotientGroup.mk' S) sorry
  g := H1Map S.subtype (ùüô _)
  zero := sorry

/-- The inflation map `H¬π(G ‚ß∏ S, A^S) ‚ü∂ H¬π(G, A)` is a monomorphism. -/
instance : Mono (H1InfRes M S).f := sorry

/-- Given a `G`-representation `A` and a normal subgroup `S ‚â§ G`, the short complex
`H¬π(G ‚ß∏ S, A^S) ‚ü∂ H¬π(G, A) ‚ü∂ H¬π(S, A)` is exact. -/
lemma H1InfRes_exact : (H1InfRes M S).Exact :=sorry

end groupCohomology

end Inflation_Restriction


noncomputable section Homology -- from #21740, #21754

def groupHomology.inhomogeneousChains (M : Rep R G) :
    ChainComplex (ModuleCat R) ‚Ñï := sorry

def groupHomology (M : Rep R G) (n : ‚Ñï) : ModuleCat R :=
  (groupHomology.inhomogeneousChains M).homology n

def groupHomology.chainsMap {H : Type} [Group H] (f : G ‚Üí* H) {M : Rep R G} {M' : Rep R H}
    (œÜ : M ‚ü∂ (Action.res (ModuleCat R) f).obj M') : inhomogeneousChains M ‚ü∂ inhomogeneousChains M'
    := sorry

def groupHomology.Map {H : Type} [Group H] (f : G ‚Üí* H) {M : Rep R G} {M' : Rep R H}
    (œÜ : M ‚ü∂ (Action.res (ModuleCat R) f).obj M') (n : ‚Ñï) : groupHomology M n ‚ü∂ groupHomology M' n
    := sorry

end Homology
